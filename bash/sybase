#!/bin/bash

#
# vim: set ts=4 sw=4 tw=0 et :
#----------------------------------------------------------------------
#File     : @(#) sybase
#Author   : Patrick LUZOLO SIASIA
#Purpose  : Startup script ASE and REP instance on a single box.
#
#Usage    : sybase_start [start|stop|restart|status]
#Arguments: $1: command as shown in usage.
#History  :
#----------------------------------------------------------------------
#..<removed>
#2022.05.16 Added repserver, fixed shellcheck warnings.
#2022.05.16 Avoid broken pipe message, moved PID file to /run subdir
#2022.05.16 Tiny code refines, shellcheck verification, formatted with shfmt.
#----------------------------------------------------------------------

# Signal traps
trap '' EXIT
trap "exit 2" HUP INT QUIT TERM SIGINT

# Increase Max stack size
ulimit -s unlimited

# Servers
readonly SERVER=CFRSV602TSGAPP4 #SAP ASE instance

# Accounts
readonly ADMINUSER=sa
readonly SERVERPW=$(/bin/cat /home/sybase/.sa_password)

# Source environment variables.
source /sap/ase/current/SYBASE.sh
readonly SYBASE_WORKSPACE=/sap/cfg/${SYBASE_ASE}/install
readonly STARTSERVER=${SYBASE_WORKSPACE}/RUN_${SERVER}
readonly ISQL_BIN=${SYBROOT}/${SYBASE_OCS}/bin/isql
set -u

# Find the name of the script
readonly USAGE="Usage: $0 {start|stop|restart|status}"

# Numeric Exit code(s)
declare -i -r EXIT_FAIL=1

die() { err "EXIT: $1" && [[ "$2" -ge 0 ]] && exit "$2" || exit ${EXIT_FAIL}; }
err() { out "ERROR: $*" 1>&2; }
out() { printf "%s" "$(date +%Y%m%dT%H%M%S%Z): $*"; }

# Check script startup parameters
if [[ "$(whoami)" != "sybase" ]]; then
  die "Script must be run as user: sybase" ${EXIT_FAIL}
fi

[[ "$#" -eq 1 ]] || die "1 argument required, $# provided \n ${USAGE} \n" ${EXIT_FAIL}

# Directory for PID file.
readonly RUNDIR="${SYBASE_WORKSPACE}/${SERVER}_PID.d"
mkdir -p "${RUNDIR}"

#Functions to interface with the sql cli
dosql() {
# Cleanup left over tmp files for isql
  ${ISQL_BIN} -b -w9999 -U"${ADMINUSER}" -P"${SERVERPW}" -S"${SERVER}" -Dmaster
}

# Service functions
start_sybase() {
  local SYBASE_START="Starting Sybase server ... ${SERVER} service: "

  (${STARTSERVER}) >/dev/null 2>&1 &
  declare -i ret=$?
  if [[ $ret -eq 0 ]]; then
    PID=$(ps aux | grep [RUN]_${SERVER} | awk {'print $2'})
    echo ${PID} > ${RUNDIR}/sybase.pid
    printf "%s pid: ${PID}  Success.\n" ${SYBASE_START}
  else
    die "$SYBASE_START Failed!" ${EXIT_FAIL}
  fi
}

stop_sybase() {
  printf "Stopping ${SERVER} service: \n"
  dosql <<-ESQL1
	set nocount on
	checkpoint all
	go
	shutdown
	go
	ESQL1

  ret=$?
  if [[ $ret -eq 0 ]]; then
    printf "Success.\n"
  else
    printf "Warning: Stop Failed!"
  fi
}

# Status is not called from systemctl status sybase.server, this is how systemctl behaves.
# Use it for manual script execution.
status_sybase() {
  "${SYBASE}/${SYBASE_ASE}/install/showserver"
  declare -i ret=$?
  if [[ $ret -ne 0 ]]; then
    die "Status Failed!" ${EXIT_FAIL}
  fi
  printf "\n"
  printf ' Recovery state                                                          BootTime'
  printf "\n"
  printf ' --------------------------------------------------------------------------------------'
  printf "\n"
  dosql <<-ESQL
	set nocount on
	select @@recovery_state as RecoveryState, @@boottime as BootTime
	go
	ESQL
}


# -------------------------- MAIN --------------------------
case "$1" in
start)
  { start_sybase; }
  ;;
stop)
  { stop_sybase; }
  ;;
restart)
  { stop_sybase && start_sybase; }
  ;;
status)
  { status_sybase; }
  ;;
help)
  echo "${USAGE}" 1>&2
  exit 1
  ;;
*)
  echo "${USAGE}" 1>&2
  exit 1
  ;;
esac
exit 0